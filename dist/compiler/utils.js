'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
var path = require('path');
var fs = require('fs');
function statSyncNoException(path) {
  try {
    return fs.statSync(path);
  } catch (e) {
    return undefined;
  }
}
function withoutExt(fileName) {
  return path.basename(fileName).split('.')[0];
}
var caseInsensitiveFs;
function isCaseInsensitive() {
  if (typeof caseInsensitiveFs !== 'undefined') {
    return caseInsensitiveFs;
  }
  var lowerCaseStat = statSyncNoException(process.execPath.toLowerCase());
  var upperCaseStat = statSyncNoException(process.execPath.toUpperCase());
  if (lowerCaseStat && upperCaseStat) {
    caseInsensitiveFs =
      lowerCaseStat.dev === upperCaseStat.dev &&
      lowerCaseStat.ino === upperCaseStat.ino;
  } else {
    caseInsensitiveFs = false;
  }
  return caseInsensitiveFs;
}
exports.isCaseInsensitive = isCaseInsensitive;
function compareFileName(first, second) {
  if (isCaseInsensitive()) {
    return first.toLowerCase() === second.toLowerCase();
  } else {
    return first === second;
  }
}
function isFileEmit(fileName, outputFileName, sourceFileName) {
  return (
    compareFileName(sourceFileName, fileName) &&
    (outputFileName.substr(-3).toLowerCase() === '.js' ||
      outputFileName.substr(-4).toLowerCase() === '.jsx')
  );
}
function isSourceMapEmit(fileName, outputFileName, sourceFileName) {
  return (
    compareFileName(sourceFileName, fileName) &&
    (outputFileName.substr(-7).toLowerCase() === '.js.map' ||
      outputFileName.substr(-8).toLowerCase() === '.jsx.map')
  );
}
function isDeclarationEmit(fileName, outputFileName, sourceFileName) {
  return (
    compareFileName(sourceFileName, fileName) &&
    outputFileName.substr(-5).toLowerCase() === '.d.ts'
  );
}
function findResultFor(fileName, output) {
  var text;
  var sourceMap;
  var declaration;
  fileName = withoutExt(fileName);
  for (var i = 0; i < output.outputFiles.length; i++) {
    var o = output.outputFiles[i];
    var outputFileName = o.name;
    var sourceFileName = withoutExt(o.name);
    if (isFileEmit(fileName, outputFileName, sourceFileName)) {
      text = o.text;
    }
    if (isSourceMapEmit(fileName, outputFileName, sourceFileName)) {
      sourceMap = o.text;
    }
    if (isDeclarationEmit(fileName, outputFileName, sourceFileName)) {
      declaration = o;
    }
  }
  if (text === undefined) {
    throw new Error('text is undefined');
  }
  return {
    text: text,
    sourceMap: sourceMap,
    declaration: declaration,
  };
}
exports.findResultFor = findResultFor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tcGlsZXIvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQkFBNkI7QUFFN0IsdUJBQXlCO0FBVXpCLDZCQUE2QixJQUFZO0lBQ3ZDLElBQUksQ0FBQztRQUNILE1BQU0sQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ1gsTUFBTSxDQUFDLFNBQVMsQ0FBQztJQUNuQixDQUFDO0FBQ0gsQ0FBQztBQUVELG9CQUFvQixRQUFnQjtJQUNsQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0MsQ0FBQztBQUVELElBQUksaUJBQXNDLENBQUM7QUFFM0M7SUFDRSxFQUFFLENBQUMsQ0FBQyxPQUFPLGlCQUFpQixLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDN0MsTUFBTSxDQUFDLGlCQUFpQixDQUFDO0lBQzNCLENBQUM7SUFFRCxJQUFNLGFBQWEsR0FBRyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFDMUUsSUFBTSxhQUFhLEdBQUcsbUJBQW1CLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBRTFFLEVBQUUsQ0FBQyxDQUFDLGFBQWEsSUFBSSxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQ25DLGlCQUFpQjtZQUNmLGFBQWEsQ0FBQyxHQUFHLEtBQUssYUFBYSxDQUFDLEdBQUc7Z0JBQ3ZDLGFBQWEsQ0FBQyxHQUFHLEtBQUssYUFBYSxDQUFDLEdBQUcsQ0FBQztJQUM1QyxDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDTixpQkFB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
